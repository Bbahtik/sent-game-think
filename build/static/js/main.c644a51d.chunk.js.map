{"version":3,"sources":["features/posts/PostList.js","app/Navbar.js","features/posts/postSlice.js","features/posts/AddPostForm.js","features/posts/FirstPart.js","features/posts/EditPostForm.js","App.js","app/store.js","index.js"],"names":["PostList","renderedPosts","useSelector","state","posts","map","post","className","title","content","substring","to","id","Navbar","postsSlice","createSlice","name","initialState","reducers","postAdded","action","console","log","type","push","payload","prepare","nanoid","postUpdated","existingPost","find","testSlice","testState","actions","postsReducer","reducer","AddPostForm","useState","setTitle","setContent","dispatch","useDispatch","htmlFor","value","onChange","e","target","onClick","FirstPart","match","params","postId","conent","placeholder","EditPostForm","history","useHistory","App","exact","path","render","Fragment","component","configureStore","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.c644a51d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const PostList = () => {\r\n    const posts = useSelector(state => state.posts)\r\n    const renderedPosts = posts.map(post => (\r\n\r\n        <article className=\"post-excerpt\" key={post.id}>\r\n            <h3>{post.title}</h3>\r\n            <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n            <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n                View Post\r\n            </Link>\r\n        </article>\r\n    ))\r\n    return (\r\n        <section className=\"posts-list\">\r\n            <h2>Posts</h2>\r\n            {renderedPosts}\r\n        </section>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <nav>\r\n      <section>\r\n        <h1>Redux Essentials Example</h1>\r\n\r\n        <div className=\"navContent\">\r\n          <div className=\"navLinks\"></div>\r\n          <Link to=\"/\">Posts</Link>\r\n        </div>\r\n      </section>\r\n    </nav>\r\n  )\r\n}\r\n","import { bindActionCreators, createSlice, nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [\r\n    { id: '1', title: \"First Post!\", content: 'Hello' },\r\n    { id: '2', title: 'Second Post!', content: 'You good?' }\r\n]\r\nconst testState = [\r\n    { id: '1', title: 'ChupapiTest' }\r\n]\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        postAdded: {\r\n            postAdded(state, action) {\r\n                console.log(action, action.type)\r\n                state.push(action.payload)\r\n            },\r\n            prepare(title, content) {\r\n                return {\r\n                    payload: {\r\n                        id: nanoid(),\r\n                        title,\r\n                        content\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        postUpdated(state, action) {\r\n            const { id, title, content } = action.payload\r\n            const existingPost = state.find(post => post.id === id)\r\n            if (existingPost) {\r\n                existingPost.title = title\r\n                existingPost.content = content\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst testSlice = createSlice({\r\n    name: 'test',\r\n    testState,\r\n    reducers: {}\r\n})\r\n\r\nexport const { postAdded, postUpdated } = postsSlice.actions\r\n\r\nexport const postsReducer = postsSlice.reducer\r\nexport const testReducer = testSlice.reducer\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { nanoid } from '@reduxjs/toolkit'\r\n\r\nimport { postAdded } from './postSlice'\r\n\r\nexport const AddPostForm = () => {\r\n    const [title, setTitle] = useState('')\r\n    const [content, setContent] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onTitleChanged = e => setTitle(e.target.value)\r\n    const onContentChanged = e => setContent(e.target.value)\r\n\r\n    const onSavePostClicked = () => {\r\n        if (title && content) {\r\n            dispatch(postAdded(title, content))\r\n            setTitle('')\r\n            setContent('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Add a new post</h2>\r\n            <form>\r\n                <label htmlFor='postTitle'>Post Title:</label>\r\n                <input type='text' id='postTitle' name='postTitle' value={title} onChange={onTitleChanged} />\r\n                <label htmlFor=\"postContent\">Content:</label>\r\n                <textarea id='postContent' name='postContent' value={content} onChange={onContentChanged} />\r\n                <button type='button' onClick={onSavePostClicked}>Save Post</button>\r\n            </form>\r\n        </section>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const FirstPart = ({ match }) => {\r\n    console.log(match.params)\r\n    const { postId } = match.params\r\n    console.log(postId)\r\n\r\n    const post = useSelector(state =>\r\n        state.posts.find(post => post.id === postId))\r\n\r\n\r\n    if (!post) {\r\n        return (\r\n            <section>\r\n                <h2>Question not found!</h2>\r\n            </section>\r\n        )\r\n\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <article className=\"main-article\">\r\n                <h2>{post.title}</h2>\r\n                <p className=\"post-content\">{post.conent}</p>\r\n                <Link to={`/editPost/${post.id}`} className=\"button\"></Link>\r\n                <input type='text' placeholder={post.conent}></input>\r\n            </article>\r\n        </section>\r\n    )\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { matchPath, useHistory } from \"react-router-dom\";\r\n\r\nimport { postUpdated } from \"./postSlice\";\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n    const { postId } = match.params\r\n\r\n\r\n    const post = useSelector(state =>\r\n        state.posts.find(post => post.id === postId))\r\n\r\n    const [title, setTitle] = useState(post.title)\r\n    const [content, setContent] = useState(post.content)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const onTitleChanged = e => setTitle(e.target.value)\r\n    const onContentChanged = e => setContent(e.target.value)\r\n\r\n    const onSavePostClicked = () => {\r\n        if (title && content) {\r\n            dispatch(postUpdated({ id: postId, title, content }))\r\n            history.push(`/posts/${postId}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Edit Post</h2>\r\n            <form>\r\n                <label htmlFor=\"postTitle\">Post Title:</label>\r\n                <input type=\"text\"\r\n                    id=\"postTitle\"\r\n                    name=\"postTitle\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    value={title}\r\n                    onChange={onTitleChanged} />\r\n                <label htmlFor=\"postContent\">Content:</label>\r\n                <textarea id=\"postContent\" name=\"postContent\" value={content} onChange={onContentChanged} />\r\n\r\n            </form>\r\n            <button type='button' onClick={onSavePostClicked}></button>\r\n        </section>\r\n    )\r\n}","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom'\r\n\r\nimport { PostList } from './features/posts/PostList'\r\nimport { Navbar } from './app/Navbar'\r\nimport { AddPostForm } from './features/posts/AddPostForm'\r\nimport { FirstPart } from './features/posts/FirstPart'\r\nimport { EditPostForm } from './features/posts/EditPostForm'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <div className=\"App\">\r\n        <Switch>\r\n\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <React.Fragment>\r\n                <AddPostForm />\r\n                <PostList />\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n          <Route exact path=\"/posts/:postId\" component={FirstPart} />\r\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm}></Route>\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { postsReducer, testReducer } from '../features/posts/postSlice'\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postsReducer\r\n  }\r\n})\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n// import './index.css'\r\nimport App from './App'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\n\r\n// import { worker } from './api/server'\r\n\r\n// Wrap app rendering so we can wait for the mock API to initialize\r\n// async function start() {\r\n// Start our mock API server\r\n// await worker.start({ onUnhandledRequest: 'bypass' })\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n\r\n// start()\r\n"],"sourceRoot":""}