{"version":3,"sources":["features/posts/PostList.js","app/Navbar.js","features/posts/postSlice.js","features/posts/AddPostForm.js","features/posts/FirstPart.js","features/posts/EditPostForm.js","features/posts/Who.js","App.js","app/store.js","index.js"],"names":["PostList","renderedPosts","useSelector","state","posts","map","post","className","title","content","substring","to","id","Navbar","console","log","length","postsSlice","createSlice","name","initialState","quest","reducers","postAdded","action","type","push","payload","postUpdated","existingPost","find","actions","postsReducer","reducer","AddPostForm","useState","setTitle","setContent","dispatch","useDispatch","htmlFor","value","onChange","e","target","onClick","nanoid","FirstPart","match","params","postId","conent","placeholder","EditPostForm","history","useHistory","Who","questId","answer","setAnswer","App","exact","path","render","Fragment","component","configureStore","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.451aec35.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const PostList = () => {\r\n    const posts = useSelector(state => state.posts)\r\n    const renderedPosts = posts.map(post => (\r\n\r\n        <article className=\"post-excerpt\" key={post.id}>\r\n            <h3>{post.title}</h3>\r\n            <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n            <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n                View Post\r\n            </Link>\r\n        </article>\r\n    ))\r\n    return (\r\n\r\n        <section className=\"posts-list\">\r\n            <h1>What?</h1>\r\n            <Link to={`/quest/1`}>\r\n                Link\r\n            </Link>\r\n            <h2>Posts</h2>\r\n            {renderedPosts}\r\n        </section>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <nav>\r\n      <section>\r\n        <h1>The sentence game</h1>\r\n\r\n        <div className=\"navContent\">\r\n          <div className=\"navLinks\"></div>\r\n          <Link to=\"/quest/1\">1</Link>\r\n          <Link to='/quest/2'>2</Link>\r\n          <Link to='/quest/3'>3</Link>\r\n          <Link to='/quest/4'>4</Link>\r\n        </div>\r\n      </section>\r\n    </nav>\r\n  )\r\n}\r\n","import { bindActionCreators, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [\r\n    { id: '1', quest: 'Who', content: '' },\r\n    { id: '2', quest: 'What', content: '' },\r\n    { id: '3', quest: 'When', content: '' },\r\n    { id: '4', quest: 'Where', content: 'aldyda' },\r\n]\r\n\r\n//Who?\r\n//  2. What?\r\n//  3. When?\r\n//  4. Where?\r\n\r\nconst initialValues = [\r\n    { id: '1', quest: 'Who', content: '' },\r\n    { id: '2', quest: 'What', content: '' },\r\n    { id: '3', quest: 'When', content: '' },\r\n    { id: '4', quest: 'Where', content: '' }\r\n]\r\nconsole.log(initialValues[3].content.length)\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        postAdded(state, action) {\r\n            console.log(action, action.type)\r\n            state.push(action.payload)\r\n        },\r\n        postUpdated(state, action) {\r\n            const { id, title, content } = action.payload\r\n            const existingPost = state.find(post => post.id === id)\r\n            if (existingPost) {\r\n                existingPost.title = title\r\n                existingPost.content = content\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\nexport const { postAdded, postUpdated } = postsSlice.actions\r\n\r\nexport const postsReducer = postsSlice.reducer\r\n\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { nanoid } from '@reduxjs/toolkit'\r\n\r\nimport { postAdded } from './postSlice'\r\n\r\nexport const AddPostForm = () => {\r\n    const [title, setTitle] = useState('')\r\n    const [content, setContent] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onTitleChanged = e => setTitle(e.target.value)\r\n    const onContentChanged = e => setContent(e.target.value)\r\n\r\n    const onSavePostClicked = () => {\r\n        if (title && content) {\r\n            dispatch(postAdded({\r\n                id: nanoid(),\r\n                title,\r\n                content\r\n            }))\r\n            setTitle('')\r\n            setContent('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Add a new post</h2>\r\n            <form>\r\n                <label htmlFor='postTitle'>Post Title:</label>\r\n                <input type='text' id='postTitle' name='postTitle' value={title} onChange={onTitleChanged} />\r\n                <label htmlFor=\"postContent\">Content:</label>\r\n                <textarea id='postContent' name='postContent' value={content} onChange={onContentChanged} />\r\n                <button type='button' onClick={onSavePostClicked}>Save Post</button>\r\n            </form>\r\n        </section>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const FirstPart = ({ match }) => {\r\n    console.log(match.params)\r\n    const { postId } = match.params\r\n    console.log(postId)\r\n\r\n    const post = useSelector(state =>\r\n        state.posts.find(post => post.id === postId))\r\n\r\n\r\n    if (!post) {\r\n        return (\r\n            <section>\r\n                <h2>Question not found!</h2>\r\n            </section>\r\n        )\r\n\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <article className=\"main-article\">\r\n                <h2>{post.title}</h2>\r\n                <p className=\"post-content\">{post.conent}</p>\r\n                <Link to={`/editPost/${post.id}`} className=\"button\"></Link>\r\n                <input type='text' placeholder={post.conent}></input>\r\n            </article>\r\n        </section>\r\n    )\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { matchPath, useHistory } from \"react-router-dom\";\r\n\r\nimport { postUpdated } from \"./postSlice\";\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n    const { postId } = match.params\r\n\r\n\r\n    const post = useSelector(state =>\r\n        state.posts.find(post => post.id === postId))\r\n\r\n    const [title, setTitle] = useState(post.title)\r\n    const [content, setContent] = useState(post.content)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const onTitleChanged = e => setTitle(e.target.value)\r\n    const onContentChanged = e => setContent(e.target.value)\r\n\r\n    const onSavePostClicked = () => {\r\n        if (title && content) {\r\n            dispatch(postUpdated({ id: postId, title, content }))\r\n            history.push(`/posts/${postId}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Edit Post</h2>\r\n            <form>\r\n                <label htmlFor=\"postTitle\">Post Title:</label>\r\n                <input type=\"text\"\r\n                    id=\"postTitle\"\r\n                    name=\"postTitle\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    value={title}\r\n                    onChange={onTitleChanged} />\r\n                <label htmlFor=\"postContent\">Content:</label>\r\n                <textarea id=\"postContent\" name=\"postContent\" value={content} onChange={onContentChanged} />\r\n\r\n            </form>\r\n            <button type='button' onClick={onSavePostClicked}></button>\r\n        </section>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { postUpdated } from \"./postSlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nexport const Who = ({ match }) => {\r\n\r\n    console.log(match)\r\n    const { questId } = match.params\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const quest = useSelector(state =>\r\n        state.posts.find(post => post.id === questId) //     state.posts.find(post => post.id === postId))\r\n    )\r\n\r\n\r\n    const [answer, setAnswer] = useState(quest.content)\r\n    console.log(quest.content)\r\n    console.log(questId)\r\n    console.log(answer)\r\n\r\n    const onAnswerChanged = e => setAnswer(e.target.value)\r\n\r\n    const onSaveAnswer = () => {\r\n        if (answer) {\r\n            dispatch(postUpdated({ id: questId, content: answer }))\r\n            // setAnswer('')\r\n            history.push(`/quests/${questId}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        < section >\r\n\r\n            <h2>{quest.quest}</h2>\r\n            <form>\r\n                <label htmlFor=\"questInput\"></label>\r\n                <input type='text' id='questInput' name=\"questInput\" placeholder={answer} value={answer} onChange={onAnswerChanged}></input>\r\n                <button type=\"button\" onClick={onSaveAnswer}></button>\r\n            </form>\r\n        </section >\r\n    )\r\n}\r\n\r\n// <form>\r\n//                 <label htmlFor=\"postTitle\">Post Title:</label>\r\n//                 <input type=\"text\"\r\n//                     id=\"postTitle\"\r\n//                     name=\"postTitle\"\r\n//                     placeholder=\"What's on your mind?\"\r\n//                     value={title}\r\n//                     onChange={onTitleChanged} />\r\n//                 <label htmlFor=\"postContent\">Content:</label>\r\n//                 <textarea id=\"postContent\" name=\"postContent\" value={content} onChange={onContentChanged} />\r\n\r\n//             </form>\r\n//             <button type='button' onClick={onSavePostClicked}></button>\r\n\r\n\r\n","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom'\r\n\r\nimport { PostList } from './features/posts/PostList'\r\nimport { Navbar } from './app/Navbar'\r\nimport { AddPostForm } from './features/posts/AddPostForm'\r\nimport { FirstPart } from './features/posts/FirstPart'\r\nimport { EditPostForm } from './features/posts/EditPostForm'\r\nimport { Who } from './features/posts/Who'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <div className=\"App\">\r\n        <Switch>\r\n\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <React.Fragment>\r\n                <AddPostForm />\r\n                <PostList />\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n          <Route exact path=\"/posts/:postId\" component={FirstPart} />\r\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm}></Route>\r\n          <Route exact path=\"/quest/:questId\" component={Who}></Route>\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { postsReducer, testReducer } from '../features/posts/postSlice'\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postsReducer\r\n  }\r\n})\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n// import './index.css'\r\nimport App from './App'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\n\r\n// import { worker } from './api/server'\r\n\r\n// Wrap app rendering so we can wait for the mock API to initialize\r\n// async function start() {\r\n// Start our mock API server\r\n// await worker.start({ onUnhandledRequest: 'bypass' })\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n\r\n// start()\r\n"],"sourceRoot":""}